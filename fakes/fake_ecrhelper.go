// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/ecrhelper"
)

type FakeECRHelper struct {
	GetECRCredentialsStub        func(string, string, string) (string, string, error)
	getECRCredentialsMutex       sync.RWMutex
	getECRCredentialsArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	getECRCredentialsReturns struct {
		result1 string
		result2 string
		result3 error
	}
	getECRCredentialsReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 error
	}
	IsECRRepoStub        func(string) (bool, error)
	isECRRepoMutex       sync.RWMutex
	isECRRepoArgsForCall []struct {
		arg1 string
	}
	isECRRepoReturns struct {
		result1 bool
		result2 error
	}
	isECRRepoReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeECRHelper) GetECRCredentials(arg1 string, arg2 string, arg3 string) (string, string, error) {
	fake.getECRCredentialsMutex.Lock()
	ret, specificReturn := fake.getECRCredentialsReturnsOnCall[len(fake.getECRCredentialsArgsForCall)]
	fake.getECRCredentialsArgsForCall = append(fake.getECRCredentialsArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetECRCredentials", []interface{}{arg1, arg2, arg3})
	fake.getECRCredentialsMutex.Unlock()
	if fake.GetECRCredentialsStub != nil {
		return fake.GetECRCredentialsStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getECRCredentialsReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeECRHelper) GetECRCredentialsCallCount() int {
	fake.getECRCredentialsMutex.RLock()
	defer fake.getECRCredentialsMutex.RUnlock()
	return len(fake.getECRCredentialsArgsForCall)
}

func (fake *FakeECRHelper) GetECRCredentialsCalls(stub func(string, string, string) (string, string, error)) {
	fake.getECRCredentialsMutex.Lock()
	defer fake.getECRCredentialsMutex.Unlock()
	fake.GetECRCredentialsStub = stub
}

func (fake *FakeECRHelper) GetECRCredentialsArgsForCall(i int) (string, string, string) {
	fake.getECRCredentialsMutex.RLock()
	defer fake.getECRCredentialsMutex.RUnlock()
	argsForCall := fake.getECRCredentialsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECRHelper) GetECRCredentialsReturns(result1 string, result2 string, result3 error) {
	fake.getECRCredentialsMutex.Lock()
	defer fake.getECRCredentialsMutex.Unlock()
	fake.GetECRCredentialsStub = nil
	fake.getECRCredentialsReturns = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeECRHelper) GetECRCredentialsReturnsOnCall(i int, result1 string, result2 string, result3 error) {
	fake.getECRCredentialsMutex.Lock()
	defer fake.getECRCredentialsMutex.Unlock()
	fake.GetECRCredentialsStub = nil
	if fake.getECRCredentialsReturnsOnCall == nil {
		fake.getECRCredentialsReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 error
		})
	}
	fake.getECRCredentialsReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeECRHelper) IsECRRepo(arg1 string) (bool, error) {
	fake.isECRRepoMutex.Lock()
	ret, specificReturn := fake.isECRRepoReturnsOnCall[len(fake.isECRRepoArgsForCall)]
	fake.isECRRepoArgsForCall = append(fake.isECRRepoArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("IsECRRepo", []interface{}{arg1})
	fake.isECRRepoMutex.Unlock()
	if fake.IsECRRepoStub != nil {
		return fake.IsECRRepoStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.isECRRepoReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECRHelper) IsECRRepoCallCount() int {
	fake.isECRRepoMutex.RLock()
	defer fake.isECRRepoMutex.RUnlock()
	return len(fake.isECRRepoArgsForCall)
}

func (fake *FakeECRHelper) IsECRRepoCalls(stub func(string) (bool, error)) {
	fake.isECRRepoMutex.Lock()
	defer fake.isECRRepoMutex.Unlock()
	fake.IsECRRepoStub = stub
}

func (fake *FakeECRHelper) IsECRRepoArgsForCall(i int) string {
	fake.isECRRepoMutex.RLock()
	defer fake.isECRRepoMutex.RUnlock()
	argsForCall := fake.isECRRepoArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECRHelper) IsECRRepoReturns(result1 bool, result2 error) {
	fake.isECRRepoMutex.Lock()
	defer fake.isECRRepoMutex.Unlock()
	fake.IsECRRepoStub = nil
	fake.isECRRepoReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeECRHelper) IsECRRepoReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isECRRepoMutex.Lock()
	defer fake.isECRRepoMutex.Unlock()
	fake.IsECRRepoStub = nil
	if fake.isECRRepoReturnsOnCall == nil {
		fake.isECRRepoReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isECRRepoReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeECRHelper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getECRCredentialsMutex.RLock()
	defer fake.getECRCredentialsMutex.RUnlock()
	fake.isECRRepoMutex.RLock()
	defer fake.isECRRepoMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeECRHelper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ecrhelper.ECRHelper = new(FakeECRHelper)
